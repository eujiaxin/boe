# Generated by Django 3.2.9 on 2021-12-28 13:13

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CallistaDataFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='User Generated Identifier for File')),
                ('upload', models.FileField(upload_to='callista/', verbose_name='Student Callista Data')),
                ('upload_date', models.DateTimeField(auto_now_add=True, verbose_name='Date and Time the file was uploaded')),
                ('has_been_processed', models.BooleanField(default=False, verbose_name='File has been processed into Database')),
            ],
            options={
                'verbose_name': 'callista data file',
                'verbose_name_plural': 'callista data files',
                'ordering': ['upload_date'],
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_code', models.CharField(max_length=16, verbose_name='Course Code')),
                ('course_version', models.PositiveSmallIntegerField(default=None, null=True, verbose_name='Course Version')),
                ('course_name', models.CharField(max_length=256, verbose_name='Course Name')),
                ('course_required_credits', models.PositiveSmallIntegerField(verbose_name='Total Credits Requried to Complete this Course')),
                ('course_duration_limit', models.PositiveSmallIntegerField(default=8, verbose_name='Maximum Years to Complete this Course')),
            ],
            options={
                'verbose_name': 'course',
                'verbose_name_plural': 'courses',
                'ordering': ['faculty', 'course_code'],
            },
        ),
        migrations.CreateModel(
            name='CourseModule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cm_code', models.CharField(max_length=32, unique=True, verbose_name='Course Module Code')),
                ('cm_name', models.CharField(max_length=128, verbose_name='Course Module Name')),
                ('type', models.CharField(choices=[('D', 'default'), ('S', 'Specialisation'), ('MJ', 'Major'), ('MN', 'Minor')], max_length=64, verbose_name='Course Module Type')),
            ],
        ),
        migrations.CreateModel(
            name='Faculty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('faculty_name', models.CharField(max_length=64, unique=True, verbose_name='Faculty Name')),
            ],
            options={
                'verbose_name': 'faculty',
                'verbose_name_plural': 'faculties',
                'ordering': ['faculty_name'],
            },
        ),
        migrations.CreateModel(
            name='Wrapper',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('threshold', models.PositiveSmallIntegerField()),
                ('is_leaf', models.BooleanField(default=False)),
                ('required_core_credit_points', models.PositiveSmallIntegerField(verbose_name='Wrapper required core credit points')),
                ('course', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.course')),
                ('parent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.wrapper')),
            ],
            options={
                'verbose_name': 'wrapper',
                'verbose_name_plural': 'wrappers',
            },
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unit_code', models.CharField(max_length=32, unique=True, verbose_name='Unit Code')),
                ('unit_name', models.CharField(max_length=128, null=True, verbose_name='Name of the Unit')),
                ('unit_credits', models.PositiveSmallIntegerField(verbose_name='Credits Awarded for Completing this Unit')),
                ('faculty', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.faculty', verbose_name='Faculty Responsible for the Unit')),
            ],
            options={
                'verbose_name': 'unit',
                'verbose_name_plural': 'units',
                'ordering': ['faculty', 'unit_code'],
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_id', models.CharField(max_length=128, verbose_name='Student ID')),
                ('student_name', models.CharField(max_length=256, verbose_name="Student's Name")),
                ('student_email', models.EmailField(max_length=128, null=True, verbose_name='Student Email')),
                ('student_intake_year', models.PositiveSmallIntegerField(verbose_name="Student's Intake Year")),
                ('student_intake_semester', models.CharField(choices=[('1', 'Semester 1'), ('2', 'Semester 2'), ('3', 'October Semester')], max_length=64, null=True, verbose_name="Student's First Semester Intake")),
                ('has_graduated', models.BooleanField(verbose_name='Have Student Graduated?')),
                ('course', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.course', verbose_name='Course in which the Student is enrolled in')),
            ],
            options={
                'verbose_name': 'student',
                'verbose_name_plural': 'students',
                'ordering': ['course', 'student_id'],
            },
        ),
        migrations.CreateModel(
            name='Enrolment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrolment_year', models.PositiveSmallIntegerField(verbose_name='Year in which Student is Taking this Unit')),
                ('enrolment_semester', models.CharField(choices=[('1', 'Semester 1'), ('2', 'Semester 2'), ('3', 'October Semester')], max_length=64, null=True, verbose_name='Semester in which Student is Taking this Unit')),
                ('enrolment_marks', models.SmallIntegerField(null=True, verbose_name='Marks obtained by the Student in this Unit')),
                ('enrolment_grade', models.CharField(choices=[('HD', 'High Distinction'), ('D', 'Distinction'), ('C', 'Credit'), ('P', 'Pass'), ('N', 'Fail'), ('DEF', 'Deferred Assessment'), ('E', 'Exempt'), ('HI', 'First Class Honours'), ('HIIA', 'Second Class Honours Division A'), ('HIIB', 'Second Class Honours Division B'), ('NA', 'Not Applicable'), ('NAS', 'Non-Assessed'), ('NE', 'Not Examinable'), ('NGO', 'Fail'), ('NH', 'Hurdle Fail'), ('NS', 'Supplementary Assessment Granted'), ('NSR', 'Not Satisfied Requirements'), ('PGO', 'Pass Grade Only (no higher grade available)'), ('SFR', 'Satisfied Faculty Requirements'), ('WDN', 'Withdrawn'), ('WH', 'Withheld'), ('WI', 'Withdrawn Incomplete'), ('WN', 'Withdrawn Fail')], max_length=64, null=True, verbose_name='Grade obtained by the Student in this Unit')),
                ('has_passed', models.BooleanField(null=True, verbose_name='Has the Student Passed this Unit?')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.student', verbose_name='Student Object in this Enrolment')),
                ('unit', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.unit', verbose_name='Unit in which the Student has Enrolled in')),
            ],
            options={
                'verbose_name': 'enrolment',
                'verbose_name_plural': 'enrolments',
                'ordering': ['student', 'unit'],
            },
        ),
        migrations.CreateModel(
            name='ElectiveList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('required_elective_credit_points', models.PositiveSmallIntegerField(verbose_name='Course Module required elective credit points')),
                ('is_free', models.BooleanField(default=False, null=True, verbose_name='is free elective')),
                ('course_module', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.coursemodule')),
            ],
            options={
                'verbose_name': 'Elective list',
                'verbose_name_plural': 'Elective lists',
            },
        ),
        migrations.CreateModel(
            name='Elective',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('elective_list', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.electivelist')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.unit')),
            ],
            options={
                'verbose_name': 'elective',
                'verbose_name_plural': 'electives',
                'ordering': ['elective_list', 'unit'],
            },
        ),
        migrations.AddField(
            model_name='coursemodule',
            name='wrapper',
            field=models.ManyToManyField(to='api.Wrapper'),
        ),
        migrations.AddField(
            model_name='course',
            name='faculty',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.faculty', verbose_name='Faculty in which the Course belongs to'),
        ),
        migrations.CreateModel(
            name='CoreList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_module', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.coursemodule')),
            ],
            options={
                'verbose_name': 'Core list',
                'verbose_name_plural': 'Core lists',
            },
        ),
        migrations.CreateModel(
            name='Core',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('core_list', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.corelist')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.unit')),
            ],
            options={
                'verbose_name': 'core',
                'verbose_name_plural': 'cores',
                'ordering': ['core_list', 'unit'],
            },
        ),
        migrations.AddIndex(
            model_name='unit',
            index=models.Index(fields=['unit_code'], name='api_unit_unit_co_b0a987_idx'),
        ),
        migrations.AddIndex(
            model_name='student',
            index=models.Index(fields=['student_id', 'course'], name='api_student_student_9275d5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='student',
            unique_together={('student_id', 'course')},
        ),
        migrations.AlterUniqueTogether(
            name='enrolment',
            unique_together={('student', 'unit', 'enrolment_year', 'enrolment_semester')},
        ),
        migrations.AlterUniqueTogether(
            name='elective',
            unique_together={('elective_list', 'unit')},
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['course_code', 'course_version'], name='api_course_course__b97ffc_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='course',
            unique_together={('course_code', 'course_version')},
        ),
        migrations.AlterUniqueTogether(
            name='core',
            unique_together={('core_list', 'unit')},
        ),
    ]
